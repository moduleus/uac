function runTestsCi
  addpath([pwd '/../../matlab']);
  if ispc()
    dir_info = dir([pwd '/../../CI/vcpkg_installed/x64-wsmrep/share/Urx-*_static']);
    if (isempty(dir_info))
      addpath([pwd '/../../urx/matlab'])

      P = matlab.unittest.parameters.Parameter.fromData(...
        'libraryPath', {[pwd '/../../CI/matlab/binding/Release/UacMatlabBinding.dll']},...
        'headerPath', {[pwd '/../../matlab/binding/uac/matlab/bindings.h']},...
        'includepaths', {{[pwd '/../../matlab/binding'], [pwd '/../../CI/matlab/binding'], [pwd '/../../CI'], [pwd '/../../urx/urx/'], [pwd '/../../urx/matlab/binding'], [pwd '/../../CI/urx_build/matlab/binding']}},...
        'envpaths', {{}}, ...
        'libraryPathUrx', {[pwd '/../../CI/urx_build/matlab/binding/Release/UrxMatlabBinding.dll']},...
        'headerPathUrx', {[pwd '/../../urx/matlab/binding/urx/matlab/bindings.h']},...
        'includepathsUrx', {{[pwd '/../../urx/urx'], [pwd '/../../urx/matlab/binding'], [pwd '/../../CI/urx_build/matlab/binding']}},...
        'envpathsUrx', {{}}...
        );
    else
      dir_include_urx = dir([pwd '/../../CI/vcpkg_installed/x64-wsmrep/include/Urx-*_static']);
      addpath([pwd '/../../CI/vcpkg_installed/x64-wsmrep/share/' dir_info(1).name '/matlab'])
      P = matlab.unittest.parameters.Parameter.fromData(...
        'libraryPath', {[pwd '/../../CI/matlab/binding/Release/UacMatlabBinding.dll']},...
        'headerPath', {[pwd '/../../matlab/binding/uac/matlab/bindings.h']},...
        'includepaths', {{[pwd '/../../matlab/binding'], [pwd '/../../CI/matlab/binding'], [pwd '/../../CI'], [pwd '/../../CI/vcpkg_installed/x64-wsmrep/include/' dir_info(1).name]}},...
        'envpaths', {{}}, ...
        'libraryPathUrx', {[pwd '/../../CI/vcpkg_installed/x64-wsmrep/bin/UrxMatlabBinding.dll']},...
        'headerPathUrx', {[pwd '/../../CI/vcpkg_installed/x64-wsmrep/include/' dir_include_urx(1).name '/urx/matlab/bindings.h']},...
        'includepathsUrx', {{[pwd '/../../CI/vcpkg_installed/x64-wsmrep/include/' dir_include_urx(1).name]}},...
        'envpathsUrx', {{}}...
        );
    end
  else
    dir_info = dir([pwd '/../../CI/vcpkg_installed/x64-lsrp/share/Urx-*_static']);
    if (isempty(dir_info))
      addpath([pwd '/../../urx/matlab'])
  
      P = matlab.unittest.parameters.Parameter.fromData(...
        'libraryPath', {[pwd '/../../CI/matlab/binding/libUacMatlabBinding.so']},...
        'headerPath', {[pwd '/../../matlab/binding/uac/matlab/bindings.h']},...
        'includepaths', {{[pwd '/../../matlab/binding'], [pwd '/../../CI/matlab/binding'], [pwd '/../../CI'], [pwd '/../../urx/urx/'], [pwd '/../../urx/matlab/binding'], [pwd '/../../CI/urx_build/matlab/binding']}},...
        'envpaths', {{}}, ...
        'libraryPathUrx', {[pwd '/../../CI/urx_build/matlab/binding/libUrxMatlabBinding.so']},...
        'headerPathUrx', {[pwd '/../../urx/matlab/binding/urx/matlab/bindings.h']},...
        'includepathsUrx', {{[pwd '/../../urx/urx'], [pwd '/../../urx/matlab/binding'], [pwd '/../../CI/urx_build/matlab/binding']}},...
        'envpathsUrx', {{}}...
        );
    else
      dir_include_urx = dir([pwd '/../../CI/vcpkg_installed/x64-lsrp/include/Urx-*_static']);
      addpath([pwd '/../../CI/vcpkg_installed/x64-lsrp/share/' dir_info(1).name '/matlab'])
      P = matlab.unittest.parameters.Parameter.fromData(...
        'libraryPath', {[pwd '/../../CI/matlab/binding/libUacMatlabBinding.so']},...
        'headerPath', {[pwd '/../../matlab/binding/uac/matlab/bindings.h']},...
        'includepaths', {{[pwd '/../../matlab/binding'], [pwd '/../../CI/matlab/binding'], [pwd '/../../CI'], [pwd '/../../CI/vcpkg_installed/x64-lsrp/include/' dir_info(1).name]}},...
        'envpaths', {{}}, ...
        'libraryPathUrx', {[pwd '/../../CI/vcpkg_installed/x64-lsrp/lib/libUrxMatlabBinding.so']},...
        'headerPathUrx', {[pwd '/../../CI/vcpkg_installed/x64-lsrp/include/' dir_include_urx(1).name '/urx/matlab/bindings.h']},...
        'includepathsUrx', {{[pwd '/../../CI/vcpkg_installed/x64-lsrp/include/' dir_include_urx(1).name]}},...
        'envpathsUrx', {{}}...
        );
    end
  end
  suite = matlab.unittest.TestSuite.fromPackage("uac.UnitTests", ...
    'ExternalParameters', P);
  lastwarn('');
  results = run(suite);
  
  for i=1:numel(results)
    assert( results(i).Failed == 0, 'Unit tests failed' )
    assert( results(i).Incomplete == 0, 'Unit tests failed' )
  end
  
  assert(isempty(lastwarn));
end
