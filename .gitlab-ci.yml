variables:
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_PATH

.before-script-vcpkg-windows: &before-script-vcpkg-windows
  - Push-Location
  - git submodule update --init vcpkg-registry
  - $vcpkg_repository=Select-String -Path "vcpkg-configuration.json" -Pattern '"repository":\s"(.+?)"' | ForEach-Object { $_.Matches.Groups[1].Value }
  - if (-not (Test-Path -Path "$Env:VCPKG_LOCAL_GIT")) { git clone $vcpkg_repository $Env:VCPKG_LOCAL_GIT }
  - $baseline=Select-String -Path "vcpkg-configuration.json" -Pattern '"baseline":\s"(.+?)"' | ForEach-Object { $_.Matches.Groups[1].Value }
  - cd "$Env:VCPKG_LOCAL_GIT"
  - git remote set-url origin $vcpkg_repository
  - git fetch
  - git checkout $baseline
  - Pop-Location
  - $vcpkg_tag = (Get-Content $Env:VCPKG_LOCAL_GIT\scripts\vcpkg-tool-metadata.txt) | Select-String -Pattern '^VCPKG_TOOL_RELEASE_TAG=(.*)'  | %{$_.Matches.Groups[1].value}
  - $url="https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg.exe"
  - mkdir $Env:VCPKG_CACHE_PATH -Force
  - $destination="$Env:VCPKG_CACHE_PATH\vcpkg-$vcpkg_tag.exe"
  - if(-not(Test-Path $destination)){Invoke-WebRequest -Uri $url -OutFile $destination}
  - Copy-Item $destination "$Env:VCPKG_LOCAL_GIT\vcpkg.exe"
  - $json = Get-Content "vcpkg.json" | Out-String | ConvertFrom-Json
  - $urx_block = $json.overrides | Where-Object { $_.name -eq "urx" }
  - $version = $urx_block.version
  - $port_version = if ($urx_block.PSObject.Properties['port-version']) { "#$($urx_block.'port-version')" } else { "" }
  - $urx_port_folder = "vcpkg-registry/ports/urx/${version}${port_version}"
  - if ($env:CI_COMMIT_REF_NAME -ne $env:CI_DEFAULT_BRANCH) { (Get-Content -Path "${urx_port_folder}/portfile.cmake") -replace '\(REF_VALUE .*$', "(REF_VALUE $(git rev-parse HEAD:urx))" | Set-Content -Path "${urx_port_folder}/portfile.cmake"; (Get-Content -Raw -Path "${urx_port_folder}/portfile.cmake") -replace '(?s)\(SHA1_VALUE[^)]*', '(SHA1_VALUE SKIP_SHA512' | Set-Content -Path "${urx_port_folder}/portfile.cmake"; (Get-Content -Path "${urx_port_folder}/portfile.cmake") -replace '\(VCPKG_REGISTRY_REF_VALUE .*$', "(VCPKG_REGISTRY_REF_VALUE $(git rev-parse HEAD:vcpkg-registry))" | Set-Content -Path "${urx_port_folder}/portfile.cmake"; (Get-Content -Raw -Path "${urx_port_folder}/portfile.cmake") -replace '(?s)\(VCPKG_REGISTRY_SHA1_VALUE[^)]*', '(VCPKG_REGISTRY_SHA1_VALUE SKIP_SHA512' | Set-Content -Path "${urx_port_folder}/portfile.cmake"; Write-Output "Update urx/${urx_port_folder}/portfile.cmake"; }
  - $Env:LOCALAPPDATA = $Env:GITLAB_LOCALAPPDATA

.before-script-vcpkg-linux: &before-script-vcpkg-linux
  - git submodule update --init vcpkg-registry
  - vcpkg_repository=$(grep -Po '"repository":\s"\K[^"]+' vcpkg-configuration.json)
  - if [ ! -d $VCPKG_LOCAL_GIT ]; then git clone $vcpkg_repository $VCPKG_LOCAL_GIT || exit 1; fi
  - baseline=$(grep -Po '"baseline":\s"\K[^"]+' vcpkg-configuration.json)
  - cd "$VCPKG_LOCAL_GIT"
  - git remote set-url origin $vcpkg_repository
  - git fetch
  - git checkout $baseline
  - cd -
  - vcpkg_tag=$(sed -n 's/^VCPKG_TOOL_RELEASE_TAG=\(.*\)/\1/p' < "$VCPKG_LOCAL_GIT/scripts/vcpkg-tool-metadata.txt")
  - mkdir -p $VCPKG_CACHE_PATH
  - destination="$VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag"
  - if [ ! -f "$destination" ]; then wget -O "$destination" "https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg-glibc" || exit 1; chmod +x "$destination"; fi
  - cp $destination "$VCPKG_LOCAL_GIT/vcpkg" || exit 1
  - version=$(grep -E -A 2 '^      "name". "urx"' vcpkg.json | grep '"version"' | awk -F '"' '{print $4}' | tr -d ',')
  - port_version=$(grep -E -A 3 '^      "name". "urx"' vcpkg.json | grep '"port-version"' || true | awk -F ' ' '{print $2}' | tr -d ',')
  - urx_port_folder="vcpkg-registry/ports/urx/$(if [ -z "$port_version" ]; then echo "$version"; else echo "$version#$port_version"; fi)"
  - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please apply iwyu patch to fix your includes"; exit 1; fi
  - if [ "$CI_COMMIT_REF_NAME" != "$CI_DEFAULT_BRANCH" ]; then sed -i -E "s/set\(REF_VALUE .*$/set(REF_VALUE $(git rev-parse HEAD:urx))/g" ${urx_port_folder}/portfile.cmake || exit 1; sed -z -i -E "s/\(SHA1_VALUE[^)]*/(SHA1_VALUE SKIP_SHA512/g" ${urx_port_folder}/portfile.cmake || exit 1; sed -i -E "s/set\(VCPKG_REGISTRY_REF_VALUE .*$/set(VCPKG_REGISTRY_REF_VALUE $(git rev-parse HEAD:vcpkg-registry))/g" ${urx_port_folder}/portfile.cmake || exit 1; sed -z -i -E "s/\(VCPKG_REGISTRY_SHA1_VALUE[^)]*/(VCPKG_REGISTRY_SHA1_VALUE SKIP_SHA512/g" ${urx_port_folder}/portfile.cmake || exit 1; echo "Update ${urx_port_folder}/portfile.cmake"; fi

.after-script-clean-vcpkg-windows: &after-script-clean-vcpkg-windows
  - (Remove-Item -LiteralPath "$Env:VCPKG_BUILDTREE" -Force -Recurse -ErrorAction SilentlyContinue) || ($LASTEXITCODE=0)
  - (Remove-Item -LiteralPath "$Env:VCPKG_LOCAL_GIT/packages" -Force -Recurse -ErrorAction SilentlyContinue) || ($LASTEXITCODE=0)

.after-script-clean-vcpkg-linux: &after-script-clean-vcpkg-linux
  - rm -Rf "$VCPKG_LOCAL_GIT/buildtrees"
  - rm -Rf "$VCPKG_LOCAL_GIT/packages"

.python-venv-windows: &python-venv-windows
  - $Env:CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python.exe -m venv .venv
  - ./.venv/Scripts/Activate.ps1
  - $Env:VCPKG_Python3_EXECUTABLE=$((Get-Location).Path + "\.venv\Scripts\python.exe")
  - python.exe -m ensurepip
  - python.exe -m pip install --upgrade pip
  - python.exe -m pip install -r requirements-gitlab.txt

.python-venv-windows-d: &python-venv-windows-d
  - $Env:CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python_d.exe -m venv .venv
  - ./.venv/Scripts/Activate.ps1
  - $Env:VCPKG_Python3_EXECUTABLE=$((Get-Location).Path + "\.venv\Scripts\python.exe")
  - python_d.exe -m ensurepip
  - python_d.exe -m pip install --upgrade pip
  - python_d.exe -m pip install -r requirements-gitlab.txt

.python-venv-linux: &python-venv-linux
  - export CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python -m venv .venv
  - source .venv/bin/activate
  - export VCPKG_Python3_EXECUTABLE=$(pwd)/.venv/bin/python
  - python -m ensurepip
  - python -m pip install --upgrade pip
  - python -m pip install -r requirements-gitlab.txt

.python-venv-linux-d: &python-venv-linux-d
  - export CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python3d -m venv .venv
  - source .venv/bin/activate
  - export VCPKG_Python3_EXECUTABLE=$(pwd)/.venv/bin/python3
  - python3d -m ensurepip
  - python3d -m pip install --upgrade pip
  - python3d -m pip install -r requirements-gitlab.txt

workflow:
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "merge_request_event"

stages:
  - build
  - format
  - doc
  - tag
  - release

doc:doxygen:
  stage: doc
  needs: []
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/doxygen:latest
  script:
    - doxygen doc/Doxyfile
    - mv doc/html public
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 1 day

.plantuml-all-cleanup: &plantuml-all-cleanup # Merge urx and uac
  - sed -i 's/urx/uac/g' doc/plantuml/architecture.puml
  # Remove template
  - sed -i 's/<template<[^>]*>>//' doc/plantuml/architecture.puml
  # Vector3D and Transform has too many relation
  - sed -i 's/.* \*-- uac\.Vector3D//' doc/plantuml/architecture.puml
  - sed -i 's/.* \*-- uac\.Transform//' doc/plantuml/architecture.puml
  # Vector3D is always double
  - sed -i 's/Vector3D<double>/Vector3D/' doc/plantuml/architecture.puml
  # Type for Vector2D and Vector3D are always double
  - sed -i 's/\( :\s\)T$/\1double/' doc/plantuml/architecture.puml
  # Remove number of connections
  - sed -i -E 's/ "[0-9]+" \*--/ *--/' doc/plantuml/architecture.puml
  # Only show relation between shared_ptr and class. Remove weak_ptr relations.
  - sed -i -E 's/^uac\..*TransmitSetup \*-- uac\.Excitation$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*GroupData \*-- uac\..*Group$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*ReceiveSetup \*-- uac\.Probe$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*TransmitSetup \*-- uac\.Probe$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\.Element \*-- uac\.ElementGeometry$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\.Element \*-- uac\.ImpulseResponse$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\.RawDataNoInit \*-- uac\.DataType$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\.RawDataVector \*-- uac\.DataType$//' doc/plantuml/architecture.puml
  # Remove detail namespace
  - sed -i 's/detail\.//g' doc/plantuml/architecture.puml
  - sed -i 's/namespace detail {//' doc/plantuml/architecture.puml
  - sed -i -z 's/\t\t\}\n\t\}/\t\}/g' doc/plantuml/architecture.puml
  # Remove urx::Acquisition
  - sed -i -z -E 's/class Acquisition[^\{]*\{([^\{\}]*|\{[^\{\}]*\})*\}//' doc/plantuml/architecture.puml
  # Merge urx and uac classes
  - perl -i -0pe "s/class Event\s+\{((.*?\n\s+)+?)\}((.*\n)+\s+class Event\s+\{)((.*?\n\s+)+?\})/\3\1\5/g" doc/plantuml/architecture.puml
  - perl -i -0pe "s/class Excitation\s+\{((.*?\n\s+)+?)\}((.*\n)+\s+class Excitation\s+\{)((.*?\n\s+)+?\})/\3\1\5/g" doc/plantuml/architecture.puml
  - perl -i -0pe "s/class Group\s+\{((.*?\n\s+)+?)\}((.*\n)+\s+class Group\s+\{)((.*?\n\s+)+?\})/\3\1\5/g" doc/plantuml/architecture.puml
  - perl -i -0pe "s/class ReceiveSetup\s+\{((.*?\n\s+)+?)\}((.*\n)+\s+class ReceiveSetup\s+\{)((.*?\n\s+)+?\})/\3\1\5/g" doc/plantuml/architecture.puml
  - perl -i -0pe "s/class TransmitSetup\s+\{((.*?\n\s+)+?)\}((.*\n)+\s+class TransmitSetup\s+\{)((.*?\n\s+)+?\})/\3\1\5/g" doc/plantuml/architecture.puml
  - perl -i -0pe "s/class Version\s+\{((.*?\n\s+)+?)\}((.*\n)+\s+class Version\s+\{)((.*?\n\s+)+?\})/\3\1\5/g" doc/plantuml/architecture.puml
  # Remove loop inheritance due to rename urx to uac
  - sed -i -E "s/^([^ ]*) <\|-- \1$//g" doc/plantuml/architecture.puml
  # Remove not needed link between classes
  - sed -i -E 's/^uac\..*Acquisition \*-- uac\.Group$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*Acquisition \*-- uac\.SuperGroup$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*-- uac\.HwConfig$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*-- uac\.TriggerIn$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*-- uac\.TriggerOut$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^uac\..*-- uac\.HwConfig::VariantType$//' doc/plantuml/architecture.puml
  # Remove unneeded class
  - sed -i -E -z 's/\s+class HwConfig::VariantType\s+\{\s+}//g' doc/plantuml/architecture.puml
  # Remove destructor
  - sed -i -z "s/\n[^~\n]*~[^\n]*\n/\n/g" doc/plantuml/architecture.puml
  # DoubleNan exists only in urx
  - sed -i 's/uac::DoubleNan/DoubleNan/g' doc/plantuml/architecture.puml

doc:plantuml:
  stage: doc
  needs: []
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/hpp2plantuml:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir -p doc/plantuml
    - hpp2plantuml -i "uac/*.h" -i "urx/urx/*.h" -o doc/plantuml/architecture.puml
    - *plantuml-all-cleanup
    - cp doc/plantuml/architecture.puml doc/plantuml/architecture_user.puml
    # Remove every function
    - sed -i -E -z "s/\n[^\n]+\([^\n]*\)[^\n]*//g" doc/plantuml/architecture_user.puml
    # Replace weak_ptr / shared_ptr by raw
    - sed -i 's/std::weak_ptr<\([^>]*\)>/\1/' doc/plantuml/architecture_user.puml
    - sed -i 's/std::shared_ptr<\([^>]*\)>/\1/' doc/plantuml/architecture_user.puml
    # Replace vector by []
    - sed -i 's/std::vector<\([^<>]*\)>/\1[]/' doc/plantuml/architecture_user.puml
    - sed -i 's/std::vector<\([^<>]*\)>/\1[]/' doc/plantuml/architecture_user.puml
    # Remove std::
    - sed -i 's/std:://' doc/plantuml/architecture_user.puml
    # Don't show C type
    - sed -i -E 's/(int[0-9]+)_t/\1/' doc/plantuml/architecture_user.puml
    # Merge AcquisitionBase and Acquisition
    - sed -i -E -z "s/\s+class AcquisitionBase\s+\{\s+([^\}]*)\s}\s+(.*)class Acquisition\s+\{\s+([^\}]*)\s}/\nclass Acquisition{\n\1\n\3}\n\2/g" doc/plantuml/architecture_user.puml
    - sed -i 's/^uac\.AcquisitionBase.*-- .*uac\.Acquisition$//g' doc/plantuml/architecture_user.puml
    - sed -i 's/^uac\.AcquisitionBase.*-- .*uac\.Group$//g' doc/plantuml/architecture_user.puml
    - sed -i 's/AcquisitionBase/Acquisition/g' doc/plantuml/architecture_user.puml
    # Generate image
    - mkdir -p public/plantuml
    - plantuml doc/plantuml/architecture_user.puml
    - plantuml -tsvg doc/plantuml/architecture_user.puml
    - mv doc/plantuml/architecture_user.* public/plantuml/
    # Generate C++ documentation
    - hpp2plantuml -i "uac/*.h" -i "urx/urx/*.h" -i urx/urx/detail/raw_data.h -o doc/plantuml/architecture.puml
    # Remove Inheritance urx::Acquisition -> urx::AcquisitionBase.
    - sed -i -E 's/^urx\.detail\.AcquisitionBase <\|-- urx\.detail\.Acquisition$//' doc/plantuml/architecture.puml
    - *plantuml-all-cleanup
    - cp doc/plantuml/architecture.puml doc/plantuml/architecture_cpp.puml
    # Remove only comparison operator
    - sed -i -E -z 's/\n[^\n]*operator[^\n]*//g' doc/plantuml/architecture_cpp.puml
    # Remove metaprogramming struct
    - sed -i -E -z 's/\n[^\n]*IsComplex[^\}]*\}//g' doc/plantuml/architecture_cpp.puml
    # Remove private (but public) method
    - sed -i -E 's/^.*secureComparison.*$//g' doc/plantuml/architecture_cpp.puml
    # Remove useless constructor for Version
    - sed -i -E 's/^.*Version\(.*$//g' doc/plantuml/architecture_cpp.puml
    # Generate image
    - plantuml doc/plantuml/architecture_cpp.puml
    - plantuml -tsvg doc/plantuml/architecture_cpp.puml
    - mv doc/plantuml/architecture_cpp.* public/plantuml/
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 1 day

format:clang-format:
  stage: format
  needs: []
  tags:
    - ubuntu
    - clang-format
  script:
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" |xargs clang-format-17 --style=file --dry-run --Werror

format:cmake-format:
  stage: format
  needs: []
  tags:
    - ubuntu
    - cmake-format
  script:
    - find . -name "CMakeLists.txt" | xargs cmake-format -i
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please, format your CMake files."; echo "$(git status --porcelain)"; exit 1; fi

format:clang-tidy:
  stage: format
  needs:
    - build:ubuntu-with-HDF5-static
  tags:
    - ubuntu
    - clang-tidy
  script:
    - cd CI
    - mkdir -p $(grep -Po '"directory":\s"\K[^"]+' compile_commands.json | sort -u)
    - CLANG_TIDY_CACHE_BINARY=/usr/bin/clang-tidy-17 run-clang-tidy-17 -clang-tidy-binary /usr/local/bin/clang-tidy-cache || exit 1

format:iwyu:
  stage: format
  needs:
    - build:ubuntu-with-HDF5-static
  tags:
    - ubuntu
    - iwyu
  script:
    - cd CI
    - mkdir -p $(grep -Po '"directory":\s"\K[^"]+' compile_commands.json | sort -u)
    - cd ..
    - sed -i "s/-Winvalid-pch.*cmake_pch.hxx //g" CI/compile_commands.json
    - iwyu_tool.py -p CI -j $NUM_PARALLEL -- -Xiwyu --no_default_mappings -Xiwyu --mapping_file="$(pwd)/.iwyu-imp" -Xiwyu --no_fwd_decls -Xiwyu --check_also="*uac/matlab/*.h" -Xiwyu --check_also="*uac/python/*.h" -Xiwyu --check_also="*uac/test/*.h" -Xiwyu --check_also="*uac/uac/*.h" > CI/iwyu_tool.log
    - fix_includes.py --nosafe_headers < CI/iwyu_tool.log
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" -exec clang-format-17 --style=file -i {} \;
    - git diff > CI/iwyu.patch
    - cat CI/iwyu.patch
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please apply iwyu patch to fix your includes"; exit 1; fi
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - CI/iwyu_tool.log
      - CI/iwyu.patch
    expire_in: 1 day

format:black-format:
  stage: format
  needs: []
  image: $CI_REGISTRY/common/ci/dockerci/black:latest
  tags:
    - docker
  script:
    - mkdir CI
    - black .
    - git diff > CI/format.patch
    - cat CI/format.patch
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please, format your python code with black."; exit 1; fi
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - CI/format.patch
    expire_in: 1 day

release:update-images-of-wiki:
  stage: release
  needs: []
  when: manual
  image: $CI_REGISTRY/common/ci/dockerci/plantuml:latest
  tags:
    - docker
  script:
    - CI_PROJECT_URL_SLASH=${CI_PROJECT_URL/:/\/}
    - CI_PROJECT_URL_HTTPS=${CI_PROJECT_URL_SLASH/.git/.wiki.git}
    - git clone https://write_wiki:${VCPKG_WIKI_ACCESS_TOKEN}@$CI_PROJECT_URL_HTTPS
    - cd uac.wiki
    - java -jar /opt/app/plantuml.jar -tsvg *.puml.md
    - rename -f "s/puml.svg/svg/" *.puml.svg
    - if [[ ! -z "$(git status --porcelain)" ]]; then git config user.email "gitlab-ci@moduleus.com"; git config user.name "Gitlab CI"; git add .; git commit -m "Update plantuml"; git push; fi

release:upload-wiki-to-github:
  stage: release
  needs:
    - release:update-images-of-wiki
  when: manual
  tags:
    - build
    - ubuntu
  script:
    - CI_PROJECT_URL_SLASH=${CI_PROJECT_URL/:/\/}
    - CI_PROJECT_URL_HTTPS=${CI_PROJECT_URL_SLASH/.git/.wiki.git}
    - git clone https://write_wiki:${VCPKG_WIKI_ACCESS_TOKEN}@$CI_PROJECT_URL_HTTPS
    - cd uac.wiki
    - git remote add github https://access:${GITHUB_TOKEN}@github.com/moduleus/uac.wiki.git
    - git push --force github main:master

tag:version:
  stage: tag
  dependencies:
    - build:ubuntu-with-HDF5-static
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - *before-script-vcpkg-linux
  script:
    - git tag $(cat CI/version.txt)
    - git push --tags
    - bash ./vcpkg-registry/update_vcpkg_registry.sh uac $(cat CI/version.txt) || exit 1
  tags:
    - ubuntu
    - build

build:windows-with-HDF5-static:
  stage: build
  needs: []
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - *python-venv-windows-d
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-wsmep -DVCPKG_HOST_TRIPLET=x64-wsmep -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install/windows-with-HDF5-static" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_PYTHON_WHL:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DWITH_VCPKG_URX:BOOL=ON -DENABLE_PCH:BOOL=OFF -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"
    - *after-script-clean-vcpkg-windows
    - cmake.exe --build CI --config Debug -- /p:CL_MPcount=$NUM_PARALLEL
    - cmake.exe --install CI --config Debug
    - cd CI
    - ctest --output-on-failure -C Debug
  artifacts:
    paths:
      - install
    expire_in: 1 day

build:windows-with-HDF5-shared:
  stage: build
  needs: []
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - *python-venv-windows
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-wdrep -DVCPKG_HOST_TRIPLET=x64-wdrep -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install/windows-with-HDF5-shared" -DBUILD_SHARED_LIBS=ON -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_VCPKG_URX:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"
    - *after-script-clean-vcpkg-windows
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
    - cmake.exe --install CI --config Release
    - cd CI
    - ctest.exe --output-on-failure -C Release
  artifacts:
    paths:
      - install
    expire_in: 1 day

build:ubuntu-with-HDF5-static:
  stage: build
  needs: []
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - *python-venv-linux
    - CFLAGS='-fsanitize=undefined -fsanitize=address' CXXFLAGS='-fsanitize=undefined -fsanitize=address' cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-17 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCMAKE_AR=/usr/bin/llvm-ar-17 -DCMAKE_AS=/usr/bin/llvm-as-17 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-17 -DCMAKE_LINKER_TYPE=LLD -DCMAKE_TOOLCHAIN_FILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-lsrp -DVCPKG_HOST_TRIPLET=x64-lsrp -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install/ubuntu-with-HDF5-static" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_PYTHON_WHL:BOOL=ON -DWITH_MATLAB:BOOL=ON -DWITH_VCPKG_URX:BOOL=ON -DENABLE_PCH:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - *after-script-clean-vcpkg-linux
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
    - cmake --install CI --config Release
    - cd CI
    - ctest --output-on-failure -C Release
  artifacts:
    when: always
    paths:
      - CI/version.txt
      - CI/compile_commands.json
      - CI/vcpkg_installed/x64-lsrp/include
      - CI/uac/utils/uac/utils/export.h
      - install
    expire_in: 1 day

build:ubuntu-with-HDF5-shared:
  stage: build
  needs: []
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - *python-venv-linux-d
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-ld -DVCPKG_HOST_TRIPLET=x64-ld -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install/ubuntu-with-HDF5-shared" -DBUILD_SHARED_LIBS=ON -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DWITH_VCPKG_URX:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - *after-script-clean-vcpkg-linux
    - cmake --build CI --config Debug --parallel $NUM_PARALLEL
    - cmake --install CI --config Debug
    - cd CI
    - ctest --output-on-failure -C Debug
  artifacts:
    paths:
      - install
    expire_in: 1 day

build:ubuntu-without-3rd-party:
  stage: build
  needs: []
  tags:
    - ubuntu
    - build
  script:
    - git submodule update --init urx
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="install/ubuntu-without-3rd-party" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=OFF -DBUILD_TESTING=OFF -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DURX_SRC=urx -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
    - cmake --install CI --config Release
    - cd CI
    - ctest --output-on-failure -C Release
  artifacts:
    paths:
      - install
    expire_in: 1 day

build:windows-python:
  stage: build
  needs: []
  tags:
    - win10
    - python
    - ntfs
  before_script:
    - *before-script-vcpkg-windows
  script:
    - *python-venv-windows
    - python.exe -m pip install . --config-settings="--global-option=CMAKE_TOOLCHAIN_FILE=$Env:VCPKG_LOCAL_GIT\\scripts\\buildsystems\\vcpkg.cmake" --config-settings="--global-option=cmake_build_type=Release" --config-settings="--global-option=vcpkg_triplet=x64-wsmrep" --config-settings="--global-option=-DWITH_PYTHON_WHL:BOOL=ON" --config-settings="--global-option=-DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root=$Env:VCPKG_BUILDTREE" --no-clean -v
    - *after-script-clean-vcpkg-windows
    - python.exe -m pip install (Get-ChildItem -Recurse | Where-Object { $_.Name -match "ultrasound_rawdata_exchange-.*-cp[0-9]+-cp[0-9]+-win_amd64\.whl" }).FullName
    - python.exe -m unittest discover test/python

build:ubuntu-python:
  stage: build
  needs: []
  tags:
    - ubuntu
    - python
  before_script:
    - *before-script-vcpkg-linux
  script:
    - *python-venv-linux-d
    - python3d -m pip install . --config-settings="--global-option=CMAKE_TOOLCHAIN_FILE=$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" --config-settings="--global-option=cmake_build_type=Debug" --config-settings="--global-option=vcpkg_triplet=x64-linux" --config-settings="--global-option=-DWITH_PYTHON_WHL:BOOL=ON" --no-clean -v
    - *after-script-clean-vcpkg-linux
    - python3d -m pip install `find . -name "ultrasound_rawdata_exchange*d-*.whl"`
    - python3d -m unittest discover test/python
    - git submodule deinit -f vcpkg-registry
    - git submodule update --init vcpkg-registry
    - stubgen -p  ultrasound_acquisition_configuration -o python
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Run stubgen -p ultrasound_acquisition_configuration -o python before commit."; echo "$(git status --porcelain)"; git diff --submodule=diff; exit 1; fi

build:windows-matlab-static:
  stage: build
  needs: []
  tags:
    - matlab
    - win10
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-wsmrep -DVCPKG_HOST_TRIPLET=x64-wsmrep -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install/windows-matlab-static" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DWITH_VCPKG_URX:BOOL=ON -DENABLE_PCH:BOOL=OFF -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"
    - *after-script-clean-vcpkg-windows
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
    - cmake.exe --install CI --config Release
    - cd test/matlab
    - $Env:URX_DEBUG=$Env:TMP + "/urx-matlab.log"
    - C:/"Program Files"/MATLAB/R2023b/bin/matlab.exe -wait -batch runTestsCi
    - cat $Env:TMP/urx-matlab.log
    - cd ../../CI/matlab/binding/Release
    - C:/"Program Files"/MATLAB/R2023b/bin/matlab.exe -wait -batch "matlab.addons.toolbox.packageToolbox('windows-Release.prj')"
    - cd ../../../..
    - Move-Item CI/matlab/binding/Release/uac.mltbx ("uac-" + (Get-Content CI/version.txt) + "-win-amd64.mltbx")
  artifacts:
    paths:
      - install
      - uac-*-win-amd64.mltbx
    expire_in: 1 day

build:ubuntu-matlab-static:
  stage: build
  needs: []
  tags:
    - matlab
    - ubuntu
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-17 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCMAKE_AR=/usr/bin/llvm-ar-17 -DCMAKE_AS=/usr/bin/llvm-as-17 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-17 -DCMAKE_LINKER_TYPE=LLD -DCMAKE_TOOLCHAIN_FILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-lsrp -DVCPKG_HOST_TRIPLET=x64-lsrp -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install/ubuntu-matlab-static" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DWITH_VCPKG_URX:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - *after-script-clean-vcpkg-linux
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
    - cmake --install CI --config Release
    - cd test/matlab
    - ssh moduleus@localhost "export URX_DEBUG=/tmp/urx-matlab.log; cd $PWD && /opt/matlab/R2022b/bin/matlab -batch runTestsCi"
    - cat /tmp/urx-matlab.log
    - cd ../../CI/matlab/binding
    - ssh moduleus@localhost 'cd '`pwd`' && /opt/matlab/R2022b/bin/matlab -batch "matlab.addons.toolbox.packageToolbox(\"linux-Release.prj\")"'
    - cd ../../..
    - cp CI/matlab/binding/uac.mltbx uac-$(cat CI/version.txt)-linux-amd64.mltbx
  after_script:
    - rm -Rf test/matlab/test.urx CI/matlab/binding/uac-*-linux-amd64.mltbx
  artifacts:
    paths:
      - CI/version.txt
      - install
      - uac-*-linux-amd64.mltbx
    expire_in: 1 day

release:all-python-linux-x64:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    PLAT: manylinux_2_27_x86_64
    SKIP_PYTHON: cp313-cp313t;cp36-cp36m;cp37-cp37m
    # ONLY_PYTHON: cp312-cp312
  stage: release
  needs: []
  when: manual
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/manylinux:latest
  before_script:
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@$CI_SERVER_HOST" > ~/.git-credentials
    - *before-script-vcpkg-linux
  script:
    - sh /CI/manylinux_vcpkg.sh ultrasound_acquisition_configuration
  artifacts:
    when: always
    paths:
      - ultrasound_acquisition_configuration*manylinux*.whl
    expire_in: 1 day

release:all-python-windows-x64:
  variables:
    CIBW_BUILD: cp38-win_amd64 cp39-win_amd64 cp310-win_amd64 cp311-win_amd64 cp312-win_amd64 pp38-win_amd64 pp39-win_amd64 pp310-win_amd64
  stage: release
  needs: []
  when: manual
  tags:
    - win10
    - python
    - ntfs
  before_script:
    - *before-script-vcpkg-windows
  script:
    - Push-Location
    - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - Enter-VsDevShell -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community" -DevCmdArguments '-arch=x64'
    - Pop-Location
    - *python-venv-windows
    - $Env:CIBW_CONFIG_SETTINGS = "--global-option=CMAKE_TOOLCHAIN_FILE=$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake --global-option=-DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root=$Env:VCPKG_BUILDTREE"
    - python.exe -m pip install cibuildwheel
    - python.exe -m cibuildwheel --output-dir wheelhouse --platform windows
    - *after-script-clean-vcpkg-windows
  artifacts:
    paths:
      - wheelhouse
    expire_in: 1 day

release:all-python-windows-x86:
  variables:
    CIBW_BUILD: cp38-win32 cp39-win32 cp310-win32 cp311-win32 cp312-win32
  stage: release
  needs: []
  when: manual
  tags:
    - win10
    - python
    - ntfs
  before_script:
    - *before-script-vcpkg-windows
  script:
    - Push-Location
    - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - Enter-VsDevShell -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community" -DevCmdArguments '-arch=x86'
    - Pop-Location
    - *python-venv-windows
    - $Env:CIBW_CONFIG_SETTINGS = "--global-option=CMAKE_TOOLCHAIN_FILE=$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake --global-option=-DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root=$Env:VCPKG_BUILDTREE"
    - python.exe -m pip install cibuildwheel
    - python.exe -m cibuildwheel --output-dir wheelhouse --platform windows
    - *after-script-clean-vcpkg-windows
  artifacts:
    paths:
      - wheelhouse
    expire_in: 1 day

# Need to use latest hdf5 to cross-compilation
# Need to add -DVCPKG_INSTALL_OPTIONS=--allow-unsupported in setup.py for pybind11.
# Can't cross-compile. pybind11 and python/CMakeLists.txt launch python.exe.
release:all-python-windows-arm64:
  variables:
    CIBW_BUILD: cp39-win_arm64 cp310-win_arm64 cp311-win_arm64 cp312-win_arm64
    CIBW_ARCHS: ARM64
  stage: release
  needs: []
  when: manual
  tags:
    - win10
    - python
    - ntfs
  before_script:
    - *before-script-vcpkg-windows
  script:
    - Push-Location
    - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - Enter-VsDevShell -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community" -DevCmdArguments '-arch=arm64'
    - Pop-Location
    - *python-venv-windows
    - $Env:CIBW_CONFIG_SETTINGS = "--global-option=CMAKE_TOOLCHAIN_FILE=$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake --global-option=-DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root=$Env:VCPKG_BUILDTREE"
    - python.exe -m pip install cibuildwheel
    - python.exe -m cibuildwheel --output-dir wheelhouse --platform windows
    - *after-script-clean-vcpkg-windows
  artifacts:
    paths:
      - wheelhouse
    expire_in: 1 day

release:upload-to-pypi:
  stage: release
  needs:
    - release:all-python-linux-x64
    - release:all-python-windows-x64
    - release:all-python-windows-x86
  when: manual
  tags:
    - ubuntu
    - python
  script:
    - *python-venv-linux
    - python -m twine upload `find . -name "*.whl"`

release:upload-to-github:
  stage: release
  needs:
    - release:all-python-linux-x64
    - release:all-python-windows-x64
    - release:all-python-windows-x86
    - build:windows-matlab-static
    - build:ubuntu-matlab-static
  when: manual
  tags:
    - ubuntu
  script:
    - gh release create -R moduleus/uac -t "v$(cat CI/version.txt)" --notes "" $(cat CI/version.txt) *.mltbx ultrasound_acquisition_configuration*.whl wheelhouse/ultrasound_acquisition_configuration*.whl
